generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  isBanned      Boolean   @default(false)
  role          String    @default("user")
  accounts      Account[]
  sessions      Session[]
  links         Link[]
  pages         Page[]
  reports       Report[]
  securityLogs  SecurityLog[]
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  password      String?
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Page {
  id          String   @id @default(cuid())
  title       String
  slug        String   @unique
  description String?
  theme       String?  @default("default")
  isPublic    Boolean  @default(true)
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  links       Link[]
  views       PageView[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  reportCount Int      @default(0)
  reports     Report[]
}

model Link {
  id          String    @id @default(cuid())
  title       String
  url         String
  icon        String?
  order       Int       @default(0)
  isActive    Boolean   @default(true)
  pageId      String
  page        Page      @relation(fields: [pageId], references: [id], onDelete: Cascade)
  userId      String
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  clicks      Click[]
  shortUrl    String?   @unique
  qrCode      String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  reportCount Int      @default(0)
  reports     Report[]
}

model Click {
  id        String   @id @default(cuid())
  linkId    String
  link      Link     @relation(fields: [linkId], references: [id], onDelete: Cascade)
  ip        String?
  userAgent String?
  country   String?
  city      String?
  device    String?
  referer   String?
  createdAt DateTime @default(now())
}

model PageView {
  id        String   @id @default(cuid())
  pageId    String
  page      Page     @relation(fields: [pageId], references: [id], onDelete: Cascade)
  ip        String?
  userAgent String?
  country   String?
  city      String?
  device    String?
  referer   String?
  createdAt DateTime @default(now())
}

model Report {
  id        String   @id @default(cuid())
  reason    String
  details   String?
  linkId    String?
  link      Link?    @relation(fields: [linkId], references: [id], onDelete: Cascade)
  pageId    String?
  page      Page?    @relation(fields: [pageId], references: [id], onDelete: Cascade)
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
}

model SecurityLog {
  id        String   @id @default(cuid())
  event     String
  userAgent String?
  ip        String?
  details   String?
  timestamp DateTime @default(now())
  userId    String?
  user      User?    @relation(fields: [userId], references: [id])

  @@index([userId])
  @@index([event])
  @@index([timestamp])
} 